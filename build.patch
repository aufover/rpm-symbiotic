# Skip submodule initialisation
--- a/scripts/build-utils.sh
+++ b/scripts/build-utils.sh
@@ -75,12 +75,7 @@
 
 git_submodule_init()
 {
-	cd "$SRCDIR"
-
-	git submodule init || exitmsg "submodule init failed"
-	git submodule update || exitmsg "submodule update failed"
-
-	cd -
+	true
 }
 
 GET="curl -LRO"

# Versions are parsed in advance during SRPM creation
--- a/scripts/gen-version.sh
+++ b/scripts/gen-version.sh
@@ -1,22 +1,22 @@
 #!/bin/bash
 
 pushd transforms/build-${LLVM_VERSION} || exit 1
-SYMBIOTIC_VERSION=`git rev-parse HEAD`
+# SYMBIOTIC_VERSION=`git rev-parse HEAD`
 SYMBIOTIC_BUILD_TYPE=$(grep 'CMAKE_BUILD_TYPE' CMakeCache.txt | sed 's@.*=\(.*\)@\1@')
 popd
 
 pushd dg/build-${LLVM_VERSION} || exit 1
-DG_VERSION=`git rev-parse HEAD`
+# DG_VERSION=`git rev-parse HEAD`
 DG_BUILD_TYPE=$(grep 'CMAKE_BUILD_TYPE' CMakeCache.txt | sed 's@.*=\(.*\)@\1@')
 popd
 
 pushd sbt-slicer/build-${LLVM_VERSION} || exit 1
-SBT_SLICER_VERSION=`git rev-parse HEAD`
+# SBT_SLICER_VERSION=`git rev-parse HEAD`
 SBT_SLICER_BUILD_TYPE=$(grep 'CMAKE_BUILD_TYPE' CMakeCache.txt | sed 's@.*=\(.*\)@\1@')
 popd
 
 pushd sbt-instrumentation/build-${LLVM_VERSION} || exit 1
-INSTRUMENTATION_VERSION=`git rev-parse HEAD`
+# INSTRUMENTATION_VERSION=`git rev-parse HEAD`
 INSTRUMENTATION_BUILD_TYPE=$(grep 'CMAKE_BUILD_TYPE' CMakeCache.txt | sed 's@.*=\(.*\)@\1@')
 popd

@@ -37,7 +37,7 @@
 fi
 
 pushd klee/build-${LLVM_VERSION} || exit 1
-KLEE_VERSION=`git rev-parse HEAD`
+# KLEE_VERSION=`git rev-parse HEAD`
 KLEE_BUILD_TYPE=$(grep 'CMAKE_BUILD_TYPE' CMakeCache.txt | sed 's@.*=\(.*\)@\1@')
 KLEE_RUNTIME_BUILD_TYPE=$(grep '^KLEE_RUNTIME_BUILD_TYPE[^-]' CMakeCache.txt | sed 's@.*=\(.*\)@\1@')
 popd
--- a/sbt-instrumentation/src/CMakeLists.txt
+++ b/sbt-instrumentation/src/CMakeLists.txt
@@ -1,10 +1,3 @@
-# generate a git-version.h with a HEAD commit hash tag
-# (if it changed)
-add_custom_target(
-	gitversion ALL sh ${CMAKE_CURRENT_SOURCE_DIR}/../git-version.sh
-)
-include_directories(${CMAKE_CURRENT_BINARY_DIR})
-
 add_executable(sbt-instr
 	rewriter.cpp
 	instr_log.cpp
--- a/sbt-slicer/src/CMakeLists.txt
+++ b/sbt-slicer/src/CMakeLists.txt
@@ -1,10 +1,3 @@
-# generate a git-version.h with a HEAD commit hash tag
-# (if it changed)
-add_custom_target(
-	gitversion ALL sh ${CMAKE_CURRENT_SOURCE_DIR}/git-version.sh
-)
-include_directories(${CMAKE_CURRENT_BINARY_DIR})
-
 add_executable(sbt-slicer sbt-slicer.cpp llvm-slicer-opts.cpp llvm-slicer-utils.cpp)
 target_link_libraries(sbt-slicer ${dg_libs} ${llvm_libs})
 add_dependencies(sbt-slicer gitversion)

# End the build script before the `strip` phase, because everything from this
# point can handle `rpmbuild` on its own.
--- a/scripts/push-to-git.sh
+++ b/scripts/push-to-git.sh
@@ -126,6 +126,8 @@ if [ "$BUILD_Z3" = "yes" ]; then
 	LIBRARIES="$LIBRARIES $PREFIX/lib/libz3*.so*"
 fi
 
+exit 0
+
 #strip binaries, it will save us 500 MB!
 for B in $BINARIES $LIBRARIES; do
 	echo "Stripping $B"

# Use `jsoncpp` from repos (`jsoncpp-devel`).
# This also makes the `rsync` dependency redundant.
diff --git a/system-build.sh b/system-build.sh
index cb4ecff..4660656 100755
--- a/system-build.sh
+++ b/system-build.sh
@@ -189,12 +189,6 @@ check()
 		MISSING="make $MISSING"
 	fi
 
-	if ! rsync --version &>/dev/null; then
-		# TODO: fix the bootstrap script to use also cp
-		echo "sbt-instrumentation needs rsync when bootstrapping json. "
-		MISSING="rsync $MISSING"
-	fi
-
 	if ! tar --version &>/dev/null; then
 		echo "Need tar utility"
 		MISSING="tar $MISSING"
@@ -382,11 +376,6 @@ if [ $FROM -le 6 ]; then
 
 	pushd "$SRCDIR/sbt-instrumentation" || exitmsg "Cloning failed"
 
-	# bootstrap JSON library if needed
-	if [ ! -f jsoncpp/dist/jsoncpp.cpp ]; then
-		./bootstrap-json.sh || exitmsg "Failed generating json files"
-	fi
-
 	mkdir -p build-${LLVM_VERSION}
 	pushd build-${LLVM_VERSION}
 	if [ ! -d CMakeFiles ]; then
