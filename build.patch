# Skip submodule initialisation
--- a/scripts/build-utils.sh
+++ b/scripts/build-utils.sh
@@ -94,12 +94,7 @@
 
 git_submodule_init()
 {
-	cd "$SRCDIR"
-
-	git submodule init || exitmsg "submodule init failed"
-	git submodule update || exitmsg "submodule update failed"
-
-	cd -
+	true
 }
 
 GET="curl -LRO"

# End the build script before the `strip` phase, because everything from this
# point can handle `rpmbuild` on its own.
diff --git a/scripts/push-to-git.sh b/scripts/push-to-git.sh
index 360eec1..11fe5a4 100644
--- a/scripts/push-to-git.sh
+++ b/scripts/push-to-git.sh
@@ -131,6 +131,8 @@ if [ "$BUILD_Z3" = "yes" ]; then
 	LIBRARIES="$LIBRARIES $PREFIX/lib/libz3*.so*"
 fi
 
+exit 0
+
 # strip binaries unless we are in a CI job, it will save us 500 MB
 if [ -z "$CI" ]; then
 	for B in $BINARIES $LIBRARIES; do

# Use `jsoncpp` from repos (`jsoncpp-devel`).
# This also makes the `rsync` dependency redundant.
diff --git a/system-build.sh b/system-build.sh
index cb4ecff..4660656 100755
--- a/system-build.sh
+++ b/system-build.sh
@@ -189,12 +189,6 @@ check()
 		MISSING="make $MISSING"
 	fi
 
-	if ! rsync --version &>/dev/null; then
-		# TODO: fix the bootstrap script to use also cp
-		echo "sbt-instrumentation needs rsync when bootstrapping json. "
-		MISSING="rsync $MISSING"
-	fi
-
 	if ! tar --version &>/dev/null; then
 		echo "Need tar utility"
 		MISSING="tar $MISSING"
@@ -382,11 +376,6 @@ if [ $FROM -le 6 ]; then
 
 	pushd "$SRCDIR/sbt-instrumentation" || exitmsg "Cloning failed"
 
-	# bootstrap JSON library if needed
-	if [ ! -f jsoncpp/dist/jsoncpp.cpp ]; then
-		./bootstrap-json.sh || exitmsg "Failed generating json files"
-	fi
-
 	mkdir -p build-${LLVM_VERSION}
 	pushd build-${LLVM_VERSION}
 	if [ ! -d CMakeFiles ]; then
