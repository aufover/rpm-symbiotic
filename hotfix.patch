# Build with default Fedora build flags
diff --git a/scripts/build-utils.sh b/scripts/build-utils.sh
index 3a43d55..60597d0 100644
--- a/scripts/build-utils.sh
+++ b/scripts/build-utils.sh
@@ -53,7 +53,7 @@ clean_and_exit()
 
 build()
 {
-	make $OPTS CFLAGS="$CFLAGS" CPPFLAGS="$CPPFLAGS" LDFLAGS="$LDFLAGS" $@ || exitmsg "Failed build"
+	make $OPTS CFLAGS="$CFLAGS" CXXFLAGS="$CXXFLAGS" LDFLAGS="$LDFLAGS" $@ || exitmsg "Failed build"
 	return 0
 }
 
diff --git a/scripts/precompile_bitcode_files.sh b/scripts/precompile_bitcode_files.sh
index c662433..e84e123 100755
--- a/scripts/precompile_bitcode_files.sh
+++ b/scripts/precompile_bitcode_files.sh
@@ -10,22 +10,21 @@ fi
 
 # precompile instrumentation files
 FILES=
-ORIG_CPPFLAGS="$CPPFLAGS"
 for LLVM in $PREFIX/llvm-*; do
 	CLANG=$LLVM/bin/clang
 	LLVM_VERSION=${LLVM#*llvm-*}
 	INCLUDE_DIR="$LLVM/lib/clang/${LLVM_VERSION}/include/"
-	CPPFLAGS="-I ${INCLUDE_DIR} $ORIG_CPPFLAGS"
+	CPPFLAGS="-I ${INCLUDE_DIR}"
 	for F in `find $INSTR/instrumentations/ -name '*.c'`; do
 		NAME=`basename $F`
 		OUT=${NAME%*.c}.bc
 		mkdir -p "$LLVM/lib" "$LLVM/lib32"
 
 		FILES="$FILES ${LLVM#install/}/lib/$OUT"
-		$CLANG $CPPFLAGS -O3 -emit-llvm -c $F -o $LLVM/lib/$OUT $CPPFLAGS $CFLAGS $LDFLAGS
+		$CLANG $CPPFLAGS -O3 -emit-llvm -c $F -o $LLVM/lib/$OUT
 
 		FILES="$FILES ${LLVM#install/}/lib32/$OUT"
-		$CLANG $CPPFLAGS -O3 -emit-llvm -c $F -m32 -o $LLVM/lib32/$OUT $CPPFLAGS $CFLAGS $LDFLAGS
+		$CLANG $CPPFLAGS -O3 -emit-llvm -c $F -m32 -o $LLVM/lib32/$OUT
 	done
 done
 
@@ -34,18 +33,18 @@ for LLVM in $PREFIX/llvm-*; do
 	CLANG=$LLVM/bin/clang
 	LLVM_VERSION=${LLVM#*llvm-*}
 	INCLUDE_DIR="$LLVM/lib/clang/${LLVM_VERSION}/include/"
-	CPPFLAGS="-I ${INCLUDE_DIR} -Iinclude/ $ORIG_CPPFLAGS"
+	CPPFLAGS="-I ${INCLUDE_DIR} -Iinclude/"
 	for F in `find $LIBS -name '*.c'`; do
 		NAME=`basename $F`
 		OUT="${F#*/}" # strip the lib/ prefix
 		OUT="${OUT%*.c}.bc" # change .c for .bc
 
 		mkdir -p "$(dirname $LLVM/lib/$OUT)"
-		$CLANG $CPPFLAGS -O3 -emit-llvm -c $F -o $LLVM/lib/$OUT $CPPFLAGS $CFLAGS $LDFLAGS
+		$CLANG $CPPFLAGS -O3 -emit-llvm -c $F -o $LLVM/lib/$OUT
 		FILES="$FILES ${LLVM#install/}/lib/$OUT"
 
 		mkdir -p "$(dirname $LLVM/lib32/$OUT)"
-		$CLANG $CPPFLAGS -O3 -emit-llvm -c $F -m32 -o $LLVM/lib32/$OUT $CPPFLAGS $CFLAGS $LDFLAGS
+		$CLANG $CPPFLAGS -O3 -emit-llvm -c $F -m32 -o $LLVM/lib32/$OUT
 		FILES="$FILES ${LLVM#install/}/lib32/$OUT"
 	done
 done

# Print absolute paths in output.
diff --git a/klee/lib/Module/InstructionInfoTable.cpp b/klee/lib/Module/InstructionInfoTable.cpp
index 48575c82..091359e6 100644
--- a/klee/lib/Module/InstructionInfoTable.cpp
+++ b/klee/lib/Module/InstructionInfoTable.cpp
@@ -144,8 +144,9 @@ public:
     auto dl = Inst.getDebugLoc();
 
     // Check if a valid debug location is assigned to the instruction.
+    auto* deb_loc = dl.get();
     if (dl.get() != nullptr) {
-      auto full_path = dl.get()->getFilename();
+      auto full_path = getFullPath(deb_loc->getDirectory(), deb_loc->getFilename());
       auto line = dl.getLine();
       auto column = dl.getCol();
 
diff --git a/klee/lib/Core/Executor.cpp b/klee/lib/Core/Executor.cpp
index 7995f701..be2d22ed 100644
--- a/klee/lib/Core/Executor.cpp
+++ b/klee/lib/Core/Executor.cpp
@@ -4645,7 +4645,7 @@ bool Executor::getSymbolicSolution(const ExecutionState &state,
     if (it.kinstruction) {
       auto *info = it.kinstruction->info;
       if (!info->file.empty()) {
-          descr += ":" + llvm::sys::path::filename(info->file).str() +
+          descr += ":" + info->file +
                    ":" + std::to_string(info->line) +
                    ":" + std::to_string(info->column);
       }

# sbt-instr logger work-around
diff --git a/sbt-instrumentation/src/instr.cpp b/sbt-instrumentation/src/instr.cpp
index 8a37ef4..8164cd5 100644
--- a/sbt-instrumentation/src/instr.cpp
+++ b/sbt-instrumentation/src/instr.cpp
@@ -49,7 +49,7 @@ struct Statistics {
     std::map<const std::string, unsigned> suppresed_instr;
 } statistics;
 
-Logger logger("log.txt");
+Logger logger("/tmp/instr_log.txt");
 
 void usage(char *name) {
     cerr << "Usage: " << name << " <config.json> <IR to be instrumented> <IR with definitions> <outputFileName> <options>" << endl;

# support llvm.fma and llvm.fmuladd instrinsics
diff --git a/klee/lib/Core/Executor.cpp b/klee/lib/Core/Executor.cpp
index 1a16d389..18ddfdd6 100644
--- a/klee/lib/Core/Executor.cpp
+++ b/klee/lib/Core/Executor.cpp
@@ -1680,5 +1680,37 @@ void Executor::executeCall(ExecutionState &state, KInstruction *ki, Function *f,
       break;
     }
+
+    case Intrinsic::fma:
+    case Intrinsic::fmuladd: {
+      // only fma supports vectors!
+      if (isa<VectorType>(i->getOperand(0)->getType()))
+        return terminateStateOnExecError(
+            state, "llvm.fma with vectors is not supported");
+
+      ref<ConstantExpr> op1 =
+          toConstant(state, eval(ki, 1, state).value, "floating point");
+      ref<ConstantExpr> op2 =
+          toConstant(state, eval(ki, 2, state).value, "floating point");
+      ref<ConstantExpr> op3 =
+          toConstant(state, eval(ki, 3, state).value, "floating point");
+
+      if (!fpWidthToSemantics(op1->getWidth()) ||
+          !fpWidthToSemantics(op2->getWidth()) ||
+          !fpWidthToSemantics(op3->getWidth()))
+        return terminateStateOnExecError(state,
+                                         "Unsupported fmuladd operation");
+
+      // (op1 * op2) + op3
+      APFloat Res(*fpWidthToSemantics(op1->getWidth()), op1->getAPValue());
+      Res.fusedMultiplyAdd(
+          APFloat(*fpWidthToSemantics(op2->getWidth()), op2->getAPValue()),
+          APFloat(*fpWidthToSemantics(op3->getWidth()), op3->getAPValue()),
+          APFloat::rmNearestTiesToEven);
+
+      bindLocal(ki, state, ConstantExpr::alloc(Res.bitcastToAPInt()));
+      break;
+    }
+
     // va_arg is handled by caller and intrinsic lowering, see comment for
     // ExecutionState::varargs
     case Intrinsic::vastart:  {
diff --git a/klee/lib/Module/IntrinsicCleaner.cpp b/klee/lib/Module/IntrinsicCleaner.cpp
index 7836c202..adef513e 100644
--- a/klee/lib/Module/IntrinsicCleaner.cpp
+++ b/klee/lib/Module/IntrinsicCleaner.cpp
@@ -66,6 +66,8 @@ b/kleeool IntrinsicCleanerPass::runOnBasicBlock(BasicBlock &b, Module &M) {
       case Intrinsic::vastart:
       case Intrinsic::vaend:
       case Intrinsic::fabs:
+      case Intrinsic::fma:
+      case Intrinsic::fmuladd:
       case Intrinsic::lifetime_start:
       case Intrinsic::lifetime_end:
         break;
