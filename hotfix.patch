--- a/scripts/symbiotic
+++ b/scripts/symbiotic
@@ -23,7 +23,7 @@ import os
 from time import time

 # set path to our package
-pth = os.path.join(os.path.dirname(__file__), '../lib/symbioticpy')
+pth = os.path.join(os.path.dirname(os.readlink(__file__)), '../lib/symbioticpy')
 sys.path.append(os.path.abspath(pth))

 from symbiotic.utils import err, dbg


--- a/lib/symbioticpy/symbiotic/utils/process.py
+++ b/lib/symbioticpy/symbiotic/utils/process.py
@@ -43,9 +43,8 @@ class ProcessRunner(object):
             msg = ' '.join(cmd) + '\n'
             raise SymbioticException(msg + str(e))
 
-        while True:
-            line = ProcessRunner.current_process.stdout.readline()
-            if line == b'' and ProcessRunner.current_process.poll() is not None:
+        for line in ProcessRunner.current_process.stdout:
+            if line == b'':
                 break
 
             watch.putLine(line)

# Use c++14 for LLVM 10
diff --git a/dg/CMakeLists.txt b/dg/CMakeLists.txt
--- a/dg/CMakeLists.txt
+++ b/dg/CMakeLists.txt
@@ -4,7 +4,7 @@
 include(CTest)
 
 # we need C++11 standard
-set(CMAKE_CXX_STANDARD 11)
+set(CMAKE_CXX_STANDARD 14)
 set(CMAKE_CXX_STANDARD_REQUIRED on)
 
 OPTION(LLVM_DG "Support for LLVM Dependency graph" ON)
@@ -132,7 +132,7 @@
 # put the -std=c++11 or -std=gnu++11 to the flags
 # on some systems. For the -fno-rtti: LLVM still got problems
 # with turning RTTI off...
-set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fno-rtti -std=c++11 -Wall -Wextra")
+set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fno-rtti -std=c++14 -Wall -Wextra")
 
 if (USE_CLANG_SANITIZERS)
 	message(WARNING "USE_CLANG_SANITIZERS has been renamed to USE_SANITIZERS")

Entering 'sbt-slicer'
diff --git a/sbt-slicer/CMakeLists.txt b/sbt-slicer/CMakeLists.txt
index 70c6335..7479c12 100644
--- a/sbt-slicer/CMakeLists.txt
+++ b/sbt-slicer/CMakeLists.txt
@@ -2,11 +2,11 @@
 project(sbt-slicer)
 
 # we need C++11 standard
-set(CMAKE_CXX_STANDARD 11)
+set(CMAKE_CXX_STANDARD 14)
 set(CMAKE_CXX_STANDARD_REQUIRED on)
 
 # Compiler Options
-set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fno-rtti -std=c++11 -Wall -Wextra")
+set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fno-rtti -std=c++14 -Wall -Wextra")
 
 find_package(LLVM REQUIRED CONFIG)
 
diff --git a/transforms/CMakeLists.txt b/transforms/CMakeLists.txt
--- a/transforms/CMakeLists.txt
+++ b/transforms/CMakeLists.txt
@@ -1,11 +1,11 @@
 cmake_minimum_required(VERSION 3.3)
 project(sbt-transforms)
 
-set(CMAKE_CXX_STANDARD 11)
+set(CMAKE_CXX_STANDARD 14)
 set(CMAKE_CXX_STANDARD_REQUIRED on)
 # explicitly add -std=c++11, some cmake versions
 # fail adding it even with CMAKE_CXX_STANDARD
-set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11 -Wall -Wextra -Wno-unused-parameter -Wno-unused-variable -fno-rtti")
+set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++14 -Wall -Wextra -Wno-unused-parameter -Wno-unused-variable -fno-rtti")
 
 find_package(LLVM REQUIRED CONFIG)
 
diff --git a/dg/include/dg/AnalysisOptions.h b/include/dg/AnalysisOptions.h
index 55958a06..0b8f7dc4 100644
--- a/dg/include/dg/AnalysisOptions.h
+++ b/include/dg/AnalysisOptions.h
@@ -3,6 +3,7 @@
 
 #include "Offset.h"
 #include <map>
+#include <string>
 
 namespace dg {
 
diff --git a/dg/include/dg/PointerAnalysis/PointsToSets/SeparateOffsetsPointsToSet.h b/include/dg/PointerAnalysis/PointsToSets/SeparateOffsetsPointsToSet.h
index a6bcba52..01d3caba 100644
--- a/dg/include/dg/PointerAnalysis/PointsToSets/SeparateOffsetsPointsToSet.h
+++ b/dg/include/dg/PointerAnalysis/PointsToSets/SeparateOffsetsPointsToSet.h
@@ -4,6 +4,7 @@
 #include "dg/PointerAnalysis/Pointer.h"
 #include "dg/ADT/Bitvector.h"
 
+#include <cstdlib>
 #include <map>
 #include <vector>
 
diff --git a/dg/lib/llvm/ThreadRegions/include/Graphs/GraphBuilder.h b/lib/llvm/ThreadRegions/include/Graphs/GraphBuilder.h
index 27fcf23e..186e07fb 100644
--- a/dg/lib/dg/llvm/ThreadRegions/include/Graphs/GraphBuilder.h
+++ b/dg/lib/llvm/ThreadRegions/include/Graphs/GraphBuilder.h
@@ -1,6 +1,7 @@
 #ifndef GRAPHBUILDER_H
 #define GRAPHBUILDER_H
 
+#include <iostream>
 #include <utility>
 #include <set>
 #include <unordered_set>

diff --git a/sbt-instrumentation/CMakeLists.txt b/sbt-instrumentation/CMakeLists.txt
index 3488ca3..d981ccd 100644
--- a/sbt-instrumentation/CMakeLists.txt
+++ b/sbt-instrumentation/CMakeLists.txt
@@ -1,7 +1,7 @@
 cmake_minimum_required(VERSION 2.8.8)
 project(instr)
 
-set(CMAKE_CXX_STANDARD 11)
+set(CMAKE_CXX_STANDARD 14)
 set(CMAKE_CXX_STANDARD_REQUIRED on)
 
 # Compiler Options

diff --git a/sbt-instrumentation/analyses/predator_plugin.hpp b/sbt-instrumentation/analyses/predator_plugin.hpp
index ef4f585..1b5622e 100644
--- a/sbt-instrumentation/analyses/predator_plugin.hpp
+++ b/sbt-instrumentation/analyses/predator_plugin.hpp
@@ -6,6 +6,7 @@
 #include <vector>
 
 #include <llvm/IR/Module.h>
+#include <llvm/Support/raw_ostream.h>
 #include "instr_plugin.hpp"
 
 class PredatorPlugin : public InstrPlugin

diff --git a/transforms/CheckModule.cpp b/transforms/CheckModule.cpp
--- a/transforms/CheckModule.cpp
+++ b/transforms/CheckModule.cpp
@@ -12,6 +12,7 @@
 #include "llvm/IR/Instructions.h"
 #include "llvm/IR/Module.h"
 #include "llvm/Pass.h"
+#include "llvm/Support/CommandLine.h"
 using namespace llvm;
 
 static cl::opt<std::string> detect_calls("detect-calls",

diff --git a/transforms/ClassifyInstructions.cpp b/transforms/ClassifyInstructions.cpp
--- a/transforms/ClassifyInstructions.cpp
+++ b/transforms/ClassifyInstructions.cpp
@@ -19,7 +19,7 @@
 using namespace llvm;
 
 namespace {
-  class ClassifyInstr : public BasicBlockPass {
+  class ClassifyInstr : public FunctionPass {
       bool stack_array{false};
       bool stack_var_array{false};
       bool has_malloc{false}, has_calloc{false},
@@ -73,16 +73,18 @@ namespace {
     public:
       static char ID;
 
-      ClassifyInstr() : BasicBlockPass(ID) {}
+      ClassifyInstr() : FunctionPass(ID) {}
 
-      bool runOnBasicBlock(BasicBlock &B) override {
-        for (auto& I : B) {
-            classifyInstruction(I);
+      bool runOnFunction(Function &F) override {
+        for (auto& B : F) {
+            for (auto& I : B) {
+                classifyInstruction(I);
+            }
         }
         return false;
       }
 
-      bool doFinalization(Module&) {
+      bool doFinalization(Module&) override {
         if (stack_array)
             llvm::errs() << "array on stack\n";
         if (stack_var_array)

diff --git a/transforms/InstrumentNontermination.cpp b/transforms/InstrumentNontermination.cpp
--- a/transforms/InstrumentNontermination.cpp
+++ b/transforms/InstrumentNontermination.cpp
@@ -14,7 +14,7 @@
 #include "llvm/IR/Module.h"
 #include "llvm/Pass.h"
 #include "llvm/IR/Type.h"
-#include "llvm/Support/raw_ostream.h"
+#include "llvm/Support/CommandLine.h"
 #include "llvm/Transforms/Utils/BasicBlockUtils.h"
 #include "llvm/IR/DebugInfoMetadata.h"
 
diff --git a/transforms/ReplaceUBSan.cpp b/transforms/ReplaceUBSan.cpp
index fb26e80..1f2713e 100644
--- a/transforms/ReplaceUBSan.cpp
+++ b/transforms/ReplaceUBSan.cpp
@@ -21,7 +21,7 @@
 #else
   #include "llvm/Support/InstIterator.h"
 #endif
-#include "llvm/Support/raw_ostream.h"
+#include "llvm/Support/CommandLine.h"
 #include "llvm/Transforms/Utils/BasicBlockUtils.h"
 #include <llvm/IR/DebugInfoMetadata.h>
